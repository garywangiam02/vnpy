{
  "system": {
    "debug": true,
    "loop": false,  # 开启loop则为启动后每小时执行一次, 关闭则启动后立即执行一次且只执行一次
    "cheat_seconds": 0,
    "long_sleep_time": 20,
    "web_query_kline_size": 1000
  },
  "robust": {
    "sleep_seconds": 20,
    "try_times": 10
  },
  "kline": {
    "type": "swap", # 获取的k线类型, spot或swap
    "fetcher": { # k线获取器配置
      "type": "s3", # 用哪种引擎获取k线, web db s3, web最慢但是不需要搭建其它中间件, db略快且方便数据统计, s3最快
      "worker": {
        "worker_count": 3
      },
      "kline_per_limit": 1000,
      "config": {
        "web": {
          "fix_time": true
        },
        "s3": {
          "region_name": "ap-northeast-1", # region名
          "bucket_name": "middle-trade" # bucket名
        },
        "db": { # 目前只支持mysql
          "driver": "driver", # 没什么用
          "host": "xxx.xxx.ap-northeast-1.rds.amazonaws.com", # mysql服务器地址
          "port": 3306, # 端口号
          "username": "asd", #用户名
          "password": "sdcfsf2", #密码
          "db_name": "trader" # 数据库名
        },
        "web": {
            "fix_time": false # 是否将从api获取的utc时间修正为本地时间
        }
      }
    },
    "pusher": {  # k线收集器专用配置
      "type": "s3", # k线保存引擎类型 db s3
      "worker": {
        "worker_count": 3
      },
      "config": {
        "s3": {
          "region_name": "ap-northeast-1",
          "bucket_name": "middle-trade"
        },
        "db": { # 目前只支持mysql
          "driver": "driver", # 没什么用
          "host": "xxx.xxx.ap-northeast-1.rds.amazonaws.com", # mysql服务器地址
          "port": 3306, # 端口号
          "username": "asd", #用户名
          "password": "sdcfsf2", #密码
          "db_name": "trader", # 数据库名
          "batch_save_buffer": 1000, # 每次保存记录数
          "conn_pool_size": 3 # 连接池大小
        }
      }
    }
  },
  "trade": {
    "trade_market": "coin_alpha_v3", # 策略名
    "trade_ratio": 1 # 杠杆
  },
  "strategy_list": [ # 策略参数
    {
      "hold_period": "4H",
      "c_factor": "lowback_dgq4",
      "factors": [
        {
          "factor": "bias",
          "if_reverse": false,
          "para": 4,
          "weight": 0.3
        },
        {
          "factor": "cci",
          "if_reverse": true,
          "para": 24,
          "weight": 0.2
        },
        {
          "factor": "REG",
          "if_reverse": false,
          "para": 8,
          "weight": 0.1
        },
        {
          "factor": "lcsd",
          "if_reverse": true,
          "para": 24,
          "weight": 0.1
        },
        {
          "factor": "K",
          "if_reverse": false,
          "para": 8,
          "weight": 0.1
        }
      ],
      "selected_coin_num": 1
    }
  ],
  "binance": { # binance api key secret
    "apiKey": "wsws",
    "secret": "sxsx"
  },
  "dingding": { # 钉钉 api key secret
    "robot_id": "wwww",
    "secret": "xxxx"
  }
}

入口脚本：select_compound_coin.py
参数入口脚本: lambda_entry.py, 可以直接对接AWS Lambda函数

如果使用参数入口脚本, 则需要以以下形式传入参数调用
{
    "module_name": "select_compound_coin",
    "method_name": "main",
    "arg_map": {
        "config_origin": {} # 这里替换为上面的配置内容
    }
}